// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Meal is an object representing the database table.
type Meal struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	MealType string `boil:"meal_type" json:"meal_type" toml:"meal_type" yaml:"meal_type"`

	R *mealR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mealL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MealColumns = struct {
	ID       string
	Name     string
	MealType string
}{
	ID:       "id",
	Name:     "name",
	MealType: "meal_type",
}

var MealTableColumns = struct {
	ID       string
	Name     string
	MealType string
}{
	ID:       "meal.id",
	Name:     "meal.name",
	MealType: "meal.meal_type",
}

// Generated where

var MealWhere = struct {
	ID       whereHelperint64
	Name     whereHelperstring
	MealType whereHelperstring
}{
	ID:       whereHelperint64{field: "\"meal\".\"id\""},
	Name:     whereHelperstring{field: "\"meal\".\"name\""},
	MealType: whereHelperstring{field: "\"meal\".\"meal_type\""},
}

// MealRels is where relationship names are stored.
var MealRels = struct {
	MealIngredients string
}{
	MealIngredients: "MealIngredients",
}

// mealR is where relationships are stored.
type mealR struct {
	MealIngredients MealIngredientSlice `boil:"MealIngredients" json:"MealIngredients" toml:"MealIngredients" yaml:"MealIngredients"`
}

// NewStruct creates a new relationship struct
func (*mealR) NewStruct() *mealR {
	return &mealR{}
}

func (r *mealR) GetMealIngredients() MealIngredientSlice {
	if r == nil {
		return nil
	}
	return r.MealIngredients
}

// mealL is where Load methods for each relationship are stored.
type mealL struct{}

var (
	mealAllColumns            = []string{"id", "name", "meal_type"}
	mealColumnsWithoutDefault = []string{"id", "name", "meal_type"}
	mealColumnsWithDefault    = []string{}
	mealPrimaryKeyColumns     = []string{"id"}
	mealGeneratedColumns      = []string{}
)

type (
	// MealSlice is an alias for a slice of pointers to Meal.
	// This should almost always be used instead of []Meal.
	MealSlice []*Meal
	// MealHook is the signature for custom Meal hook methods
	MealHook func(context.Context, boil.ContextExecutor, *Meal) error

	mealQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mealType                 = reflect.TypeOf(&Meal{})
	mealMapping              = queries.MakeStructMapping(mealType)
	mealPrimaryKeyMapping, _ = queries.BindMapping(mealType, mealMapping, mealPrimaryKeyColumns)
	mealInsertCacheMut       sync.RWMutex
	mealInsertCache          = make(map[string]insertCache)
	mealUpdateCacheMut       sync.RWMutex
	mealUpdateCache          = make(map[string]updateCache)
	mealUpsertCacheMut       sync.RWMutex
	mealUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mealAfterSelectMu sync.Mutex
var mealAfterSelectHooks []MealHook

var mealBeforeInsertMu sync.Mutex
var mealBeforeInsertHooks []MealHook
var mealAfterInsertMu sync.Mutex
var mealAfterInsertHooks []MealHook

var mealBeforeUpdateMu sync.Mutex
var mealBeforeUpdateHooks []MealHook
var mealAfterUpdateMu sync.Mutex
var mealAfterUpdateHooks []MealHook

var mealBeforeDeleteMu sync.Mutex
var mealBeforeDeleteHooks []MealHook
var mealAfterDeleteMu sync.Mutex
var mealAfterDeleteHooks []MealHook

var mealBeforeUpsertMu sync.Mutex
var mealBeforeUpsertHooks []MealHook
var mealAfterUpsertMu sync.Mutex
var mealAfterUpsertHooks []MealHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Meal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Meal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Meal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Meal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Meal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Meal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Meal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Meal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Meal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMealHook registers your hook function for all future operations.
func AddMealHook(hookPoint boil.HookPoint, mealHook MealHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mealAfterSelectMu.Lock()
		mealAfterSelectHooks = append(mealAfterSelectHooks, mealHook)
		mealAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mealBeforeInsertMu.Lock()
		mealBeforeInsertHooks = append(mealBeforeInsertHooks, mealHook)
		mealBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mealAfterInsertMu.Lock()
		mealAfterInsertHooks = append(mealAfterInsertHooks, mealHook)
		mealAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mealBeforeUpdateMu.Lock()
		mealBeforeUpdateHooks = append(mealBeforeUpdateHooks, mealHook)
		mealBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mealAfterUpdateMu.Lock()
		mealAfterUpdateHooks = append(mealAfterUpdateHooks, mealHook)
		mealAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mealBeforeDeleteMu.Lock()
		mealBeforeDeleteHooks = append(mealBeforeDeleteHooks, mealHook)
		mealBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mealAfterDeleteMu.Lock()
		mealAfterDeleteHooks = append(mealAfterDeleteHooks, mealHook)
		mealAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mealBeforeUpsertMu.Lock()
		mealBeforeUpsertHooks = append(mealBeforeUpsertHooks, mealHook)
		mealBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mealAfterUpsertMu.Lock()
		mealAfterUpsertHooks = append(mealAfterUpsertHooks, mealHook)
		mealAfterUpsertMu.Unlock()
	}
}

// One returns a single meal record from the query.
func (q mealQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Meal, error) {
	o := &Meal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for meal")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Meal records from the query.
func (q mealQuery) All(ctx context.Context, exec boil.ContextExecutor) (MealSlice, error) {
	var o []*Meal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Meal slice")
	}

	if len(mealAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Meal records in the query.
func (q mealQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count meal rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mealQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if meal exists")
	}

	return count > 0, nil
}

// MealIngredients retrieves all the meal_ingredient's MealIngredients with an executor.
func (o *Meal) MealIngredients(mods ...qm.QueryMod) mealIngredientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"meal_ingredient\".\"meal_id\"=?", o.ID),
	)

	return MealIngredients(queryMods...)
}

// LoadMealIngredients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mealL) LoadMealIngredients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMeal interface{}, mods queries.Applicator) error {
	var slice []*Meal
	var object *Meal

	if singular {
		var ok bool
		object, ok = maybeMeal.(*Meal)
		if !ok {
			object = new(Meal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMeal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMeal))
			}
		}
	} else {
		s, ok := maybeMeal.(*[]*Meal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMeal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMeal))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mealR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mealR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`meal_ingredient`),
		qm.WhereIn(`meal_ingredient.meal_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meal_ingredient")
	}

	var resultSlice []*MealIngredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice meal_ingredient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meal_ingredient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meal_ingredient")
	}

	if len(mealIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MealIngredients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mealIngredientR{}
			}
			foreign.R.Meal = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MealID {
				local.R.MealIngredients = append(local.R.MealIngredients, foreign)
				if foreign.R == nil {
					foreign.R = &mealIngredientR{}
				}
				foreign.R.Meal = local
				break
			}
		}
	}

	return nil
}

// AddMealIngredients adds the given related objects to the existing relationships
// of the meal, optionally inserting them as new records.
// Appends related to o.R.MealIngredients.
// Sets related.R.Meal appropriately.
func (o *Meal) AddMealIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MealIngredient) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MealID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"meal_ingredient\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"meal_id"}),
				strmangle.WhereClause("\"", "\"", 0, mealIngredientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MealID, rel.IngredientID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MealID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mealR{
			MealIngredients: related,
		}
	} else {
		o.R.MealIngredients = append(o.R.MealIngredients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mealIngredientR{
				Meal: o,
			}
		} else {
			rel.R.Meal = o
		}
	}
	return nil
}

// Meals retrieves all the records using an executor.
func Meals(mods ...qm.QueryMod) mealQuery {
	mods = append(mods, qm.From("\"meal\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"meal\".*"})
	}

	return mealQuery{q}
}

// FindMeal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMeal(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Meal, error) {
	mealObj := &Meal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"meal\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mealObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from meal")
	}

	if err = mealObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mealObj, err
	}

	return mealObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Meal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meal provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mealColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mealInsertCacheMut.RLock()
	cache, cached := mealInsertCache[key]
	mealInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mealAllColumns,
			mealColumnsWithDefault,
			mealColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mealType, mealMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mealType, mealMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"meal\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"meal\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into meal")
	}

	if !cached {
		mealInsertCacheMut.Lock()
		mealInsertCache[key] = cache
		mealInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Meal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Meal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mealUpdateCacheMut.RLock()
	cache, cached := mealUpdateCache[key]
	mealUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mealAllColumns,
			mealPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update meal, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"meal\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, mealPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mealType, mealMapping, append(wl, mealPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update meal row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for meal")
	}

	if !cached {
		mealUpdateCacheMut.Lock()
		mealUpdateCache[key] = cache
		mealUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mealQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for meal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for meal")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MealSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"meal\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mealPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in meal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all meal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Meal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meal provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mealColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mealUpsertCacheMut.RLock()
	cache, cached := mealUpsertCache[key]
	mealUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mealAllColumns,
			mealColumnsWithDefault,
			mealColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mealAllColumns,
			mealPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert meal, could not build update column list")
		}

		ret := strmangle.SetComplement(mealAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mealPrimaryKeyColumns))
			copy(conflict, mealPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"meal\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mealType, mealMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mealType, mealMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert meal")
	}

	if !cached {
		mealUpsertCacheMut.Lock()
		mealUpsertCache[key] = cache
		mealUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Meal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Meal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Meal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mealPrimaryKeyMapping)
	sql := "DELETE FROM \"meal\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from meal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for meal")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mealQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mealQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from meal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meal")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MealSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mealBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"meal\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mealPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from meal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meal")
	}

	if len(mealAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Meal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMeal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MealSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MealSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"meal\".* FROM \"meal\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mealPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MealSlice")
	}

	*o = slice

	return nil
}

// MealExists checks if the Meal row exists.
func MealExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"meal\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if meal exists")
	}

	return exists, nil
}

// Exists checks if the Meal row exists.
func (o *Meal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MealExists(ctx, exec, o.ID)
}
