// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MealIngredient is an object representing the database table.
type MealIngredient struct {
	MealID       int64       `boil:"meal_id" json:"meal_id" toml:"meal_id" yaml:"meal_id"`
	IngredientID int64       `boil:"ingredient_id" json:"ingredient_id" toml:"ingredient_id" yaml:"ingredient_id"`
	Quantity     null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`

	R *mealIngredientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mealIngredientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MealIngredientColumns = struct {
	MealID       string
	IngredientID string
	Quantity     string
}{
	MealID:       "meal_id",
	IngredientID: "ingredient_id",
	Quantity:     "quantity",
}

var MealIngredientTableColumns = struct {
	MealID       string
	IngredientID string
	Quantity     string
}{
	MealID:       "meal_ingredient.meal_id",
	IngredientID: "meal_ingredient.ingredient_id",
	Quantity:     "meal_ingredient.quantity",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MealIngredientWhere = struct {
	MealID       whereHelperint64
	IngredientID whereHelperint64
	Quantity     whereHelpernull_String
}{
	MealID:       whereHelperint64{field: "\"meal_ingredient\".\"meal_id\""},
	IngredientID: whereHelperint64{field: "\"meal_ingredient\".\"ingredient_id\""},
	Quantity:     whereHelpernull_String{field: "\"meal_ingredient\".\"quantity\""},
}

// MealIngredientRels is where relationship names are stored.
var MealIngredientRels = struct {
	Ingredient string
	Meal       string
}{
	Ingredient: "Ingredient",
	Meal:       "Meal",
}

// mealIngredientR is where relationships are stored.
type mealIngredientR struct {
	Ingredient *Ingredient `boil:"Ingredient" json:"Ingredient" toml:"Ingredient" yaml:"Ingredient"`
	Meal       *Meal       `boil:"Meal" json:"Meal" toml:"Meal" yaml:"Meal"`
}

// NewStruct creates a new relationship struct
func (*mealIngredientR) NewStruct() *mealIngredientR {
	return &mealIngredientR{}
}

func (r *mealIngredientR) GetIngredient() *Ingredient {
	if r == nil {
		return nil
	}
	return r.Ingredient
}

func (r *mealIngredientR) GetMeal() *Meal {
	if r == nil {
		return nil
	}
	return r.Meal
}

// mealIngredientL is where Load methods for each relationship are stored.
type mealIngredientL struct{}

var (
	mealIngredientAllColumns            = []string{"meal_id", "ingredient_id", "quantity"}
	mealIngredientColumnsWithoutDefault = []string{"meal_id", "ingredient_id"}
	mealIngredientColumnsWithDefault    = []string{"quantity"}
	mealIngredientPrimaryKeyColumns     = []string{"meal_id", "ingredient_id"}
	mealIngredientGeneratedColumns      = []string{}
)

type (
	// MealIngredientSlice is an alias for a slice of pointers to MealIngredient.
	// This should almost always be used instead of []MealIngredient.
	MealIngredientSlice []*MealIngredient
	// MealIngredientHook is the signature for custom MealIngredient hook methods
	MealIngredientHook func(context.Context, boil.ContextExecutor, *MealIngredient) error

	mealIngredientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mealIngredientType                 = reflect.TypeOf(&MealIngredient{})
	mealIngredientMapping              = queries.MakeStructMapping(mealIngredientType)
	mealIngredientPrimaryKeyMapping, _ = queries.BindMapping(mealIngredientType, mealIngredientMapping, mealIngredientPrimaryKeyColumns)
	mealIngredientInsertCacheMut       sync.RWMutex
	mealIngredientInsertCache          = make(map[string]insertCache)
	mealIngredientUpdateCacheMut       sync.RWMutex
	mealIngredientUpdateCache          = make(map[string]updateCache)
	mealIngredientUpsertCacheMut       sync.RWMutex
	mealIngredientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mealIngredientAfterSelectMu sync.Mutex
var mealIngredientAfterSelectHooks []MealIngredientHook

var mealIngredientBeforeInsertMu sync.Mutex
var mealIngredientBeforeInsertHooks []MealIngredientHook
var mealIngredientAfterInsertMu sync.Mutex
var mealIngredientAfterInsertHooks []MealIngredientHook

var mealIngredientBeforeUpdateMu sync.Mutex
var mealIngredientBeforeUpdateHooks []MealIngredientHook
var mealIngredientAfterUpdateMu sync.Mutex
var mealIngredientAfterUpdateHooks []MealIngredientHook

var mealIngredientBeforeDeleteMu sync.Mutex
var mealIngredientBeforeDeleteHooks []MealIngredientHook
var mealIngredientAfterDeleteMu sync.Mutex
var mealIngredientAfterDeleteHooks []MealIngredientHook

var mealIngredientBeforeUpsertMu sync.Mutex
var mealIngredientBeforeUpsertHooks []MealIngredientHook
var mealIngredientAfterUpsertMu sync.Mutex
var mealIngredientAfterUpsertHooks []MealIngredientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MealIngredient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MealIngredient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MealIngredient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MealIngredient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MealIngredient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MealIngredient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MealIngredient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MealIngredient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MealIngredient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mealIngredientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMealIngredientHook registers your hook function for all future operations.
func AddMealIngredientHook(hookPoint boil.HookPoint, mealIngredientHook MealIngredientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mealIngredientAfterSelectMu.Lock()
		mealIngredientAfterSelectHooks = append(mealIngredientAfterSelectHooks, mealIngredientHook)
		mealIngredientAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mealIngredientBeforeInsertMu.Lock()
		mealIngredientBeforeInsertHooks = append(mealIngredientBeforeInsertHooks, mealIngredientHook)
		mealIngredientBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mealIngredientAfterInsertMu.Lock()
		mealIngredientAfterInsertHooks = append(mealIngredientAfterInsertHooks, mealIngredientHook)
		mealIngredientAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mealIngredientBeforeUpdateMu.Lock()
		mealIngredientBeforeUpdateHooks = append(mealIngredientBeforeUpdateHooks, mealIngredientHook)
		mealIngredientBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mealIngredientAfterUpdateMu.Lock()
		mealIngredientAfterUpdateHooks = append(mealIngredientAfterUpdateHooks, mealIngredientHook)
		mealIngredientAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mealIngredientBeforeDeleteMu.Lock()
		mealIngredientBeforeDeleteHooks = append(mealIngredientBeforeDeleteHooks, mealIngredientHook)
		mealIngredientBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mealIngredientAfterDeleteMu.Lock()
		mealIngredientAfterDeleteHooks = append(mealIngredientAfterDeleteHooks, mealIngredientHook)
		mealIngredientAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mealIngredientBeforeUpsertMu.Lock()
		mealIngredientBeforeUpsertHooks = append(mealIngredientBeforeUpsertHooks, mealIngredientHook)
		mealIngredientBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mealIngredientAfterUpsertMu.Lock()
		mealIngredientAfterUpsertHooks = append(mealIngredientAfterUpsertHooks, mealIngredientHook)
		mealIngredientAfterUpsertMu.Unlock()
	}
}

// One returns a single mealIngredient record from the query.
func (q mealIngredientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MealIngredient, error) {
	o := &MealIngredient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for meal_ingredient")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MealIngredient records from the query.
func (q mealIngredientQuery) All(ctx context.Context, exec boil.ContextExecutor) (MealIngredientSlice, error) {
	var o []*MealIngredient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MealIngredient slice")
	}

	if len(mealIngredientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MealIngredient records in the query.
func (q mealIngredientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count meal_ingredient rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mealIngredientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if meal_ingredient exists")
	}

	return count > 0, nil
}

// Ingredient pointed to by the foreign key.
func (o *MealIngredient) Ingredient(mods ...qm.QueryMod) ingredientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IngredientID),
	}

	queryMods = append(queryMods, mods...)

	return Ingredients(queryMods...)
}

// Meal pointed to by the foreign key.
func (o *MealIngredient) Meal(mods ...qm.QueryMod) mealQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MealID),
	}

	queryMods = append(queryMods, mods...)

	return Meals(queryMods...)
}

// LoadIngredient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mealIngredientL) LoadIngredient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMealIngredient interface{}, mods queries.Applicator) error {
	var slice []*MealIngredient
	var object *MealIngredient

	if singular {
		var ok bool
		object, ok = maybeMealIngredient.(*MealIngredient)
		if !ok {
			object = new(MealIngredient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMealIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMealIngredient))
			}
		}
	} else {
		s, ok := maybeMealIngredient.(*[]*MealIngredient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMealIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMealIngredient))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mealIngredientR{}
		}
		args[object.IngredientID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mealIngredientR{}
			}

			args[obj.IngredientID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ingredient`),
		qm.WhereIn(`ingredient.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ingredient")
	}

	var resultSlice []*Ingredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ingredient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ingredient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ingredient")
	}

	if len(ingredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ingredient = foreign
		if foreign.R == nil {
			foreign.R = &ingredientR{}
		}
		foreign.R.MealIngredients = append(foreign.R.MealIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IngredientID == foreign.ID {
				local.R.Ingredient = foreign
				if foreign.R == nil {
					foreign.R = &ingredientR{}
				}
				foreign.R.MealIngredients = append(foreign.R.MealIngredients, local)
				break
			}
		}
	}

	return nil
}

// LoadMeal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mealIngredientL) LoadMeal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMealIngredient interface{}, mods queries.Applicator) error {
	var slice []*MealIngredient
	var object *MealIngredient

	if singular {
		var ok bool
		object, ok = maybeMealIngredient.(*MealIngredient)
		if !ok {
			object = new(MealIngredient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMealIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMealIngredient))
			}
		}
	} else {
		s, ok := maybeMealIngredient.(*[]*MealIngredient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMealIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMealIngredient))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mealIngredientR{}
		}
		args[object.MealID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mealIngredientR{}
			}

			args[obj.MealID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`meal`),
		qm.WhereIn(`meal.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Meal")
	}

	var resultSlice []*Meal
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Meal")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meal")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meal")
	}

	if len(mealAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Meal = foreign
		if foreign.R == nil {
			foreign.R = &mealR{}
		}
		foreign.R.MealIngredients = append(foreign.R.MealIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MealID == foreign.ID {
				local.R.Meal = foreign
				if foreign.R == nil {
					foreign.R = &mealR{}
				}
				foreign.R.MealIngredients = append(foreign.R.MealIngredients, local)
				break
			}
		}
	}

	return nil
}

// SetIngredient of the mealIngredient to the related item.
// Sets o.R.Ingredient to related.
// Adds o to related.R.MealIngredients.
func (o *MealIngredient) SetIngredient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ingredient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"meal_ingredient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"ingredient_id"}),
		strmangle.WhereClause("\"", "\"", 0, mealIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MealID, o.IngredientID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IngredientID = related.ID
	if o.R == nil {
		o.R = &mealIngredientR{
			Ingredient: related,
		}
	} else {
		o.R.Ingredient = related
	}

	if related.R == nil {
		related.R = &ingredientR{
			MealIngredients: MealIngredientSlice{o},
		}
	} else {
		related.R.MealIngredients = append(related.R.MealIngredients, o)
	}

	return nil
}

// SetMeal of the mealIngredient to the related item.
// Sets o.R.Meal to related.
// Adds o to related.R.MealIngredients.
func (o *MealIngredient) SetMeal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Meal) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"meal_ingredient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"meal_id"}),
		strmangle.WhereClause("\"", "\"", 0, mealIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MealID, o.IngredientID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MealID = related.ID
	if o.R == nil {
		o.R = &mealIngredientR{
			Meal: related,
		}
	} else {
		o.R.Meal = related
	}

	if related.R == nil {
		related.R = &mealR{
			MealIngredients: MealIngredientSlice{o},
		}
	} else {
		related.R.MealIngredients = append(related.R.MealIngredients, o)
	}

	return nil
}

// MealIngredients retrieves all the records using an executor.
func MealIngredients(mods ...qm.QueryMod) mealIngredientQuery {
	mods = append(mods, qm.From("\"meal_ingredient\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"meal_ingredient\".*"})
	}

	return mealIngredientQuery{q}
}

// FindMealIngredient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMealIngredient(ctx context.Context, exec boil.ContextExecutor, mealID int64, ingredientID int64, selectCols ...string) (*MealIngredient, error) {
	mealIngredientObj := &MealIngredient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"meal_ingredient\" where \"meal_id\"=? AND \"ingredient_id\"=?", sel,
	)

	q := queries.Raw(query, mealID, ingredientID)

	err := q.Bind(ctx, exec, mealIngredientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from meal_ingredient")
	}

	if err = mealIngredientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mealIngredientObj, err
	}

	return mealIngredientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MealIngredient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meal_ingredient provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mealIngredientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mealIngredientInsertCacheMut.RLock()
	cache, cached := mealIngredientInsertCache[key]
	mealIngredientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mealIngredientAllColumns,
			mealIngredientColumnsWithDefault,
			mealIngredientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mealIngredientType, mealIngredientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mealIngredientType, mealIngredientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"meal_ingredient\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"meal_ingredient\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into meal_ingredient")
	}

	if !cached {
		mealIngredientInsertCacheMut.Lock()
		mealIngredientInsertCache[key] = cache
		mealIngredientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MealIngredient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MealIngredient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mealIngredientUpdateCacheMut.RLock()
	cache, cached := mealIngredientUpdateCache[key]
	mealIngredientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mealIngredientAllColumns,
			mealIngredientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update meal_ingredient, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"meal_ingredient\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, mealIngredientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mealIngredientType, mealIngredientMapping, append(wl, mealIngredientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update meal_ingredient row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for meal_ingredient")
	}

	if !cached {
		mealIngredientUpdateCacheMut.Lock()
		mealIngredientUpdateCache[key] = cache
		mealIngredientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mealIngredientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for meal_ingredient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for meal_ingredient")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MealIngredientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mealIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"meal_ingredient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mealIngredientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mealIngredient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mealIngredient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MealIngredient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meal_ingredient provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mealIngredientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mealIngredientUpsertCacheMut.RLock()
	cache, cached := mealIngredientUpsertCache[key]
	mealIngredientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mealIngredientAllColumns,
			mealIngredientColumnsWithDefault,
			mealIngredientColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mealIngredientAllColumns,
			mealIngredientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert meal_ingredient, could not build update column list")
		}

		ret := strmangle.SetComplement(mealIngredientAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mealIngredientPrimaryKeyColumns))
			copy(conflict, mealIngredientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"meal_ingredient\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mealIngredientType, mealIngredientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mealIngredientType, mealIngredientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert meal_ingredient")
	}

	if !cached {
		mealIngredientUpsertCacheMut.Lock()
		mealIngredientUpsertCache[key] = cache
		mealIngredientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MealIngredient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MealIngredient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MealIngredient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mealIngredientPrimaryKeyMapping)
	sql := "DELETE FROM \"meal_ingredient\" WHERE \"meal_id\"=? AND \"ingredient_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from meal_ingredient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for meal_ingredient")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mealIngredientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mealIngredientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from meal_ingredient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meal_ingredient")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MealIngredientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mealIngredientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mealIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"meal_ingredient\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mealIngredientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mealIngredient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meal_ingredient")
	}

	if len(mealIngredientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MealIngredient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMealIngredient(ctx, exec, o.MealID, o.IngredientID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MealIngredientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MealIngredientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mealIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"meal_ingredient\".* FROM \"meal_ingredient\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mealIngredientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MealIngredientSlice")
	}

	*o = slice

	return nil
}

// MealIngredientExists checks if the MealIngredient row exists.
func MealIngredientExists(ctx context.Context, exec boil.ContextExecutor, mealID int64, ingredientID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"meal_ingredient\" where \"meal_id\"=? AND \"ingredient_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mealID, ingredientID)
	}
	row := exec.QueryRowContext(ctx, sql, mealID, ingredientID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if meal_ingredient exists")
	}

	return exists, nil
}

// Exists checks if the MealIngredient row exists.
func (o *MealIngredient) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MealIngredientExists(ctx, exec, o.MealID, o.IngredientID)
}
