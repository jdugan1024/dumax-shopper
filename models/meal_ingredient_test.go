// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMealIngredients(t *testing.T) {
	t.Parallel()

	query := MealIngredients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMealIngredientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealIngredientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MealIngredients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealIngredientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MealIngredientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealIngredientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MealIngredientExists(ctx, tx, o.MealID, o.IngredientID)
	if err != nil {
		t.Errorf("Unable to check if MealIngredient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MealIngredientExists to return true, but got false.")
	}
}

func testMealIngredientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mealIngredientFound, err := FindMealIngredient(ctx, tx, o.MealID, o.IngredientID)
	if err != nil {
		t.Error(err)
	}

	if mealIngredientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMealIngredientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MealIngredients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMealIngredientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MealIngredients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMealIngredientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mealIngredientOne := &MealIngredient{}
	mealIngredientTwo := &MealIngredient{}
	if err = randomize.Struct(seed, mealIngredientOne, mealIngredientDBTypes, false, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}
	if err = randomize.Struct(seed, mealIngredientTwo, mealIngredientDBTypes, false, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mealIngredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mealIngredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MealIngredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMealIngredientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mealIngredientOne := &MealIngredient{}
	mealIngredientTwo := &MealIngredient{}
	if err = randomize.Struct(seed, mealIngredientOne, mealIngredientDBTypes, false, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}
	if err = randomize.Struct(seed, mealIngredientTwo, mealIngredientDBTypes, false, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mealIngredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mealIngredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mealIngredientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func mealIngredientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MealIngredient) error {
	*o = MealIngredient{}
	return nil
}

func testMealIngredientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MealIngredient{}
	o := &MealIngredient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MealIngredient object: %s", err)
	}

	AddMealIngredientHook(boil.BeforeInsertHook, mealIngredientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mealIngredientBeforeInsertHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.AfterInsertHook, mealIngredientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mealIngredientAfterInsertHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.AfterSelectHook, mealIngredientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mealIngredientAfterSelectHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.BeforeUpdateHook, mealIngredientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mealIngredientBeforeUpdateHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.AfterUpdateHook, mealIngredientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mealIngredientAfterUpdateHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.BeforeDeleteHook, mealIngredientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mealIngredientBeforeDeleteHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.AfterDeleteHook, mealIngredientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mealIngredientAfterDeleteHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.BeforeUpsertHook, mealIngredientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mealIngredientBeforeUpsertHooks = []MealIngredientHook{}

	AddMealIngredientHook(boil.AfterUpsertHook, mealIngredientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mealIngredientAfterUpsertHooks = []MealIngredientHook{}
}

func testMealIngredientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMealIngredientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mealIngredientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMealIngredientToOneIngredientUsingIngredient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealIngredient
	var foreign Ingredient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealIngredientDBTypes, false, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IngredientID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ingredient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddIngredientHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MealIngredientSlice{&local}
	if err = local.L.LoadIngredient(ctx, tx, false, (*[]*MealIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ingredient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ingredient = nil
	if err = local.L.LoadIngredient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ingredient == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMealIngredientToOneMealUsingMeal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealIngredient
	var foreign Meal

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealIngredientDBTypes, false, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mealDBTypes, false, mealColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meal struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MealID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Meal().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMealHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Meal) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MealIngredientSlice{&local}
	if err = local.L.LoadMeal(ctx, tx, false, (*[]*MealIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Meal == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Meal = nil
	if err = local.L.LoadMeal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Meal == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMealIngredientToOneSetOpIngredientUsingIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealIngredient
	var b, c Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealIngredientDBTypes, false, strmangle.SetComplement(mealIngredientPrimaryKeyColumns, mealIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ingredient{&b, &c} {
		err = a.SetIngredient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ingredient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MealIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IngredientID != x.ID {
			t.Error("foreign key was wrong value", a.IngredientID)
		}

		if exists, err := MealIngredientExists(ctx, tx, a.MealID, a.IngredientID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testMealIngredientToOneSetOpMealUsingMeal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealIngredient
	var b, c Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealIngredientDBTypes, false, strmangle.SetComplement(mealIngredientPrimaryKeyColumns, mealIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Meal{&b, &c} {
		err = a.SetMeal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Meal != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MealIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MealID != x.ID {
			t.Error("foreign key was wrong value", a.MealID)
		}

		if exists, err := MealIngredientExists(ctx, tx, a.MealID, a.IngredientID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testMealIngredientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMealIngredientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MealIngredientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMealIngredientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MealIngredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mealIngredientDBTypes = map[string]string{`MealID`: `INTEGER`, `IngredientID`: `INTEGER`, `Quantity`: `TEXT`}
	_                     = bytes.MinRead
)

func testMealIngredientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mealIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mealIngredientAllColumns) == len(mealIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMealIngredientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mealIngredientAllColumns) == len(mealIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MealIngredient{}
	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mealIngredientDBTypes, true, mealIngredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mealIngredientAllColumns, mealIngredientPrimaryKeyColumns) {
		fields = mealIngredientAllColumns
	} else {
		fields = strmangle.SetComplement(
			mealIngredientAllColumns,
			mealIngredientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MealIngredientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMealIngredientsUpsert(t *testing.T) {
	t.Parallel()
	if len(mealIngredientAllColumns) == len(mealIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MealIngredient{}
	if err = randomize.Struct(seed, &o, mealIngredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MealIngredient: %s", err)
	}

	count, err := MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mealIngredientDBTypes, false, mealIngredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealIngredient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MealIngredient: %s", err)
	}

	count, err = MealIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
